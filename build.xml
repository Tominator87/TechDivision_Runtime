<?xml version="1.0"?>
<project name="TechDivision_Runtime" default="deploy" basedir=".">

    <property environment="env" />

    <property name="lib.dir" value="${basedir}/lib" />
    <property name="custom-lib.dir" value="${basedir}/custom-lib" />
    <property name="php-src.dir" value="${basedir}/src" />
    <property name="php-test.dir" value="${basedir}/tests" />
    <property name="php-target.dir" value="${basedir}/target"/>

    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>
    <property file="${basedir}/build.${os.family}.properties"/>

    <!-- ==================================================================== -->
    <!-- Cleans build directory for new build                                 -->
    <!-- ==================================================================== -->
    <target name="clean" description="Cleans build directory in preparation for new build">
        <delete dir="${appserver.compile.prefix}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares all the required directories								  -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean" description="Prepares all the required directories.">
        <mkdir dir="${php-target.dir}" />
        <mkdir dir="${lib.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the sources to the target directory							  -->
    <!-- ==================================================================== -->
    <target name="copy" description="Copies the sources to the target directory.">
        <copy todir="${php-target.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*" />
                <exclude name="etc/**/*"/>
            </fileset>
        </copy>
        <copy todir="${php-target.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="etc/**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>
    <!-- ==================================================================== -->
    <!-- Copies the sources to the deploy directory     					  -->
    <!-- ==================================================================== -->
    <target name="deploy" depends="copy" description="Copies the sources to the deploy directory.">
        <copy todir="${dir.www}/${deploy.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-target.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Generates the API documentation                                      -->
    <!-- ==================================================================== -->
    <target name="apidoc" description="Generates the API documentation.">
        <exec executable="phpdoc">
            <arg line="-ct type -ue on -s on -t ${php-target.dir}/docs -o HTML:frames:earthli -d ${php-src.dir}/app/code/core"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the code sniffer and generates a report                         -->
    <!-- ==================================================================== -->
    <target name="phpcs" depends="apidoc" description="Runs the code sniffer and generates a report.">
        <exec executable="phpcs" output="${php-target.dir}/reports/checkstyle.xml">
            <arg line="--standard=ZEND --report=checkstyle ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the copy and paste detection                                    -->
    <!-- ==================================================================== -->
    <target name="phpcpd" depends="phpcs" description="Runs the copy and paste detection.">
        <exec executable="phpcpd">
            <arg line="--log-pmd ${php-target.dir}/reports/pmd-cpd.xml ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Generate phploc.csv                                                  -->
    <!-- ==================================================================== -->
    <target name="phploc" depends="phpcpd" description="Generate phploc.csv">
        <exec executable="phploc">
            <arg line="--log-xml ${php-target.dir}/reports/phploc.xml ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPDepend tool and generats a graphs                        -->
    <!-- ==================================================================== -->
    <target name="pdepend" depends="phploc" description="Runs the PHPDepend tool and generats a graphs.">
        <exec executable="pdepend">
            <arg line="--summary-xml=${php-target.dir}/reports/pdepend.xml --jdepend-xml=${php-target.dir}/reports/jdepend.xml --jdepend-chart=${php-target.dir}/reports/jdepend.svg --overview-pyramid=${php-target.dir}/reports/pdepend-pyramid.svg ${php-src.dir}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHP mess detector tool                                      -->
    <!-- ==================================================================== -->
    <target name="phpmd" depends="pdepend" description="Runs the PHP Mess detector tool.">
        <exec executable="phpmd">
            <arg line="${php-src.dir} xml codesize,unusedcode --reportfile ${php-target.dir}/reports/pmd.xml" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the test sources to the target directory					  -->
    <!-- ==================================================================== -->
    <target name="copy-tests" depends="copy" description="Copies the test sources to the target directory.">
        <copy todir="${php-target.dir}">
            <fileset dir="${php-test.dir}">
                <include name="**/*" />
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit tests and generates a report                        -->
    <!-- ==================================================================== -->
    <target name="run-tests" depends="copy-tests" description="Runs the PHPUnit tests and generates a report.">
        <exec executable="phpunit" dir="${php-target.dir}">
            <arg line="--bootstrap bootstrap.php --configuration phpunit.xml.dist" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit tests and generates a report						  -->
    <!-- ==================================================================== -->
    <target name="build" description="Runs the PHPUnit tests and generates a report.">
        <antcall target="phpmd"/>
        <antcall target="run-tests"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PHP source package has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-php-src-present" description="Check if PHP Source Package has been downloaded yet.">
        <available file="${lib.dir}/php-${appserver.php.version}.tar.gz" property="php-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL pthreads sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-pthreads-src-present" description="Check if PECL pthreads sources has been downloaded yet.">
        <available file="${custom-lib.dir}/pthreads-master.zip" property="pthreads-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL apcu sources has been downloaded yet               -->
    <!-- ==================================================================== -->
    <target name="check-apcu-src-present" description="Check if PECL apcu sources has been downloaded yet.">
        <available file="${lib.dir}/apcu-${appserver.apcu.version}.tgz" property="apcu-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if ext-appserver sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-ext-appserver-src-present" description="Check if ext appserver sources has been downloaded yet.">
        <available file="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" property="ext-appserver-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libfreetype sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libfreetype-src-present" description="Check if libfreetype sources has been downloaded yet.">
        <available file="${lib.dir}/freetype-${libfreetype.version}.tgz" property="libfreetype-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libmcrypt sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libmcrypt-src-present" description="Check if libmcrypt sources has been downloaded yet.">
        <available file="${lib.dir}/libmcrypt-${libmcrypt.version}.tgz" property="libmcrypt-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libpng sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-libpng-src-present" description="Check if libpng sources has been downloaded yet.">
        <available file="${lib.dir}/libpng-${libpng.version}.tgz" property="libpng-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libjpeg sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libjpeg-src-present" description="Check if libjpeg sources has been downloaded yet.">
        <available file="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" property="libjpeg-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if pcre sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-pcre-src-present" description="Check if pcre sources has been downloaded yet.">
        <available file="${lib.dir}/pcre-${pcre.version}.tar.gz" property="pcre-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PHP source package by given version number		  		          -->
    <!-- ==================================================================== -->
    <target name="get-php-src" depends="check-php-src-present" unless="${php-src.present}" description="Get PHP source package by given version number">
        <get src="http://de1.php.net/get/php-${appserver.php.version}.tar.gz/from/this/mirror" dest="${lib.dir}/php-${appserver.php.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL pthreads source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-pthreads-src" depends="check-pthreads-src-present" unless="${pthreads-src.present}" description="Get PECL pthreads source package by given version number">
        <get src="https://github.com/krakjoe/pthreads/archive/master.zip" dest="${custom-lib.dir}/pthreads-master.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL apcu source package by given version number                 -->
    <!-- ==================================================================== -->
    <target name="get-apcu-src" depends="check-apcu-src-present" unless="${apcu-src.present}" description="Get PECL apcu source package by given version number">
        <get src="http://pecl.php.net/get/apcu-${appserver.apcu.version}.tgz" dest="${lib.dir}/apcu-${appserver.apcu.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL appserver source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-ext-appserver-src" depends="check-ext-appserver-src-present" unless="${ext-appserver-src.present}" description="Get php ext appserver source package by given version number">
        <get src="https://github.com/techdivision/php-ext-appserver/releases/download/v${appserver.ext-appserver.version}-beta/appserver-${appserver.ext-appserver.version}.tgz" dest="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libfreetype source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libfreetype-src" depends="check-libfreetype-src-present" unless="${libfreetype-src.present}" description="Get libfreetype source package by given version number.">
        <get src="${libfreetype.download.url}" dest="${lib.dir}/freetype-${libfreetype.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libmcrypt source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libmcrypt-src" depends="check-libmcrypt-src-present" unless="${libmcrypt-src.present}" description="Get libmcrypt source package by given version number.">
        <get src="${libmcrypt.download.url}" dest="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libpng source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libpng-src" depends="check-libpng-src-present" unless="${libpng-src.present}" description="Get libpng source package by given version number.">
        <get src="${libpng.download.url}" dest="${lib.dir}/libpng-${libpng.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libjpeg source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libjpeg-src" depends="check-libjpeg-src-present" unless="${libjpeg-src.present}" description="Get libjpeg source package by given version number.">
        <get src="${libjpeg.download.url}" dest="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get pcre source package by given version number		              -->
    <!-- ==================================================================== -->
    <target name="get-pcre-src" depends="check-pcre-src-present" unless="${pcre-src.present}" description="Get pcre source package by given version number.">
        <get src="${pcre.download.url}" dest="${lib.dir}/pcre-${pcre.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PHP sources for the runtime                             -->
    <!-- ==================================================================== -->
    <target name="prepare-source" depends="prepare" description="Prepares the PHP sources for the runtime.">
        <!-- prepare PHP sources -->
        <antcall target="get-php-src"/>
        <untar src="${lib.dir}/php-${appserver.php.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/php-${appserver.php.version}/build" includes="**/*"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PECL sources for static compilation (not active!!)      -->
    <!-- ==================================================================== -->
    <target name="prepare-pecl-extension" description="Prepares the PECL sources for static compilation (not active!!)">
        <!-- prepare php ext appserver sources sources for static compilation -->
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/appserver">
            <fileset dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}"/>
        </move>
        <!-- prepare PECL pthread sources for static compilation -->
        <antcall target="get-pthreads-src"/>
        <unzip src="${custom-lib.dir}/pthreads-master.zip" dest="${php-target.dir}"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/pthreads">
            <fileset dir="${php-target.dir}/pthreads-master"/>
        </move>
        <!-- prepare PECL apcu sources for static compilation -->
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${appserver.apcu.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/apcu">
            <fileset dir="${php-target.dir}/apcu-${appserver.apcu.version}"/>
        </move>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libjpeg sources for the runtime                         -->
    <!-- ==================================================================== -->
    <target name="build-libjpeg" if="${libjpeg.build}" description="Prepares the libjpeg sources for the runtime.">
        <antcall target="get-libjpeg-src"/>
        <untar src="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="sh">
            <env key="CC" value="${libjpeg.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/jpeg-${libjpeg.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="make"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libpng sources for the runtime                          -->
    <!-- ==================================================================== -->
    <target name="build-libpng" if="${libpng.build}" description="Prepares the libpng sources for the runtime.">
        <antcall target="get-libpng-src"/>
        <untar src="${lib.dir}/libpng-${libpng.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="sh">
            <env key="CC" value="${libpng.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libpng-${libpng.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="make"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libfreetype sources for the runtime                     -->
    <!-- ==================================================================== -->
    <target name="build-libfreetype" if="${libfreetype.build}" description="Prepares the libfreetype sources for the runtime.">
        <antcall target="get-libfreetype-src"/>
        <untar src="${lib.dir}/freetype-${libfreetype.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/freetype-${libfreetype.version}/builds" includes="**/*"/>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="sh">
            <env key="CC" value="${libfreetype.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="make"/>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libmcrypt sources for the runtime                       -->
    <!-- ==================================================================== -->
    <target name="build-libmcrypt" if="${libmcrypt.build}" description="Prepares the libmcrypt sources for the runtime.">
        <antcall target="get-libmcrypt-src"/>
        <untar src="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="sh">
            <env key="CC" value="${libmcrypt.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="make"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the pcre sources for the runtime                            -->
    <!-- ==================================================================== -->
    <target name="build-pcre" if="${pcre.build}" description="Prepares the pcre sources for the runtime.">
        <antcall target="get-pcre-src"/>
        <untar src="${lib.dir}/pcre-${pcre.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="sh">
            <env key="CC" value="${pcre.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/pcre-${pcre.version}" includes="install-sh"/>
        <chmod perm="755" dir="${php-target.dir}/pcre-${pcre.version}" includes="configure"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="make"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the PHP Application Server runtime sources                    -->
    <!-- ==================================================================== -->
    <target name="copy-runtime" description="Copies the PHP Application Server runtime sources.">
        <copy todir="${appserver.compile.prefix}" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PHP source for the PHP Application Server runtime         -->
    <!-- ==================================================================== -->
    <target name="build-runtime" depends="prepare-source" description="Compiles the ApplicationServer runtime environment.">

        <!-- build the necessary libraries -->
    	<antcall target="build-libjpeg"/>
        <antcall target="build-libpng"/>
        <antcall target="build-libfreetype"/>
        <antcall target="build-libmcrypt"/>
        <antcall target="build-pcre"/>
    	
    	<!-- prepare the PECL extensions -->
        <antcall target="prepare-pecl-extension"/>
    	
        <!-- compile the PHP sources -->
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="clean"/>
        </exec>
        <delete file="${php-target.dir}/php-${appserver.php.version}/aclocal.m4"/>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="sh">
            <arg value="buildconf"/>
            <arg line="--force"/>
        </exec>
    	
    	<!-- log PHP compile configuration -->
    	<echo message="Now compiling PHP using configure params: ${appserver.compile.configuration}"/>
    	
    	<!-- configure, compile and install PHP binary -->
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="sh">
            <env key="CC" value="${appserver.cc}"/>
            <arg line="configure ${appserver.compile.configuration}"/>
        </exec>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="-j8"/>
        </exec>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="install"/>
        </exec>

        <antcall target="pecl-build-pthreads"/>
        <antcall target="pecl-build-appserver"/>
        <antcall target="pecl-build-apcu"/>
        
    	<!-- copy runtime files from src directory -->
        <antcall target="copy-runtime"/>
        
        <antcall target="install-demo-project"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL pthreads as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-pthreads" description="Builds the PECL pthreads as shared extension.">
        <antcall target="get-pthreads-src"/>
        <unzip src="${custom-lib.dir}/pthreads-master.zip" dest="${php-target.dir}"/>
        <exec dir="${php-target.dir}/pthreads-master" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/pthreads-master" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/pthreads-master" executable="make"/>
        <exec dir="${php-target.dir}/pthreads-master" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL apcu as shared extension                             -->
    <!-- ==================================================================== -->
    <target name="pecl-build-apcu" description="Builds the PECL apcu as shared extension.">
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${appserver.apcu.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="make"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>
    
    <!-- ==================================================================== -->
    <!-- Builds the PECL appserver as shared extension                        -->
    <!-- ==================================================================== -->
    <target name="pecl-build-appserver" description="Builds the PECL appserver as shared extension.">
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="make"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install composer packages                                            -->
    <!-- ==================================================================== -->
    <target name="install-composer" description="Install composer and ApplicationServer packages.">
        <!-- download the composer installer -->
        <exec dir="${php-target.dir}" executable="curl">
            <arg line="-sS http://getcomposer.org/installer -o installer"/>
        </exec>
        <!-- install composer itself -->
        <exec dir="${php-target.dir}" executable="${appserver.compile.prefix}/bin/php">
            <arg line="installer -- --install-dir ${appserver.compile.prefix}/bin"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install ApplicationServer packages                                   -->
    <!-- ==================================================================== -->
	<target name="install-sources" depends="install-composer" description="Install ApplicationServer packages.">
        <exec dir="${appserver.compile.prefix}/app/code" executable="${appserver.compile.prefix}/bin/php">
            <arg line="${appserver.compile.prefix}/bin/composer.phar update"/>
        </exec>
	</target>

    <!-- ==================================================================== -->
    <!-- Install the ApplicationServer demo project                           -->
    <!-- ==================================================================== -->
    <target name="install-demo-project" depends="install-sources" description="Install the ApplicationServer demo project.">
        <exec dir="${appserver.compile.prefix}" executable="${appserver.compile.prefix}/bin/php">
            <arg line="${appserver.compile.prefix}/bin/composer.phar create-project techdivision/techdivision_applicationserverproject ${appserver.compile.prefix}/webapps/demo dev-master"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the DEBIAN runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-DEBIAN-build-system" description="Install the necessary libraries to build the DEBIAN runtime.">
	<exec dir="${php-target.dir}" executable="apt-get" inputstring="Y">
            <arg value="install"/>
            <arg value="ant"/>
            <arg value="autoconf"/>
		    <arg value="make"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2-dev"/>
            <arg value="libssl-dev"/>
            <arg value="pkg-config"/>
            <arg value="libbz2-dev"/>
            <arg value="libjpeg8-dev"/>
            <arg value="libpng-dev"/>
            <arg value="libfreetype6-dev"/>
            <arg value="libmcrypt-dev"/>
            <arg value="git-core"/>
            <arg value="libxpm-dev"/>
            <arg value="libc-client2007e-dev"/>
            <arg value="libpcre3-dev"/>
            <arg value="libpng12-dev"/>
            <arg value="libcurl4-openssl-dev"/>
            <arg value="libpng12-dev"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the FEDORA runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-FEDORA-build-system" description="Install the necessary libraries to build the FEDORA runtime.">
        <exec dir="${php-target.dir}" executable="yum" inputstring="Y">
            <arg value="install"/>
            <arg value="ant"/>
            <arg value="autoconf"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2"/>
            <arg value="libxml2-devel"/>
            <arg value="openssl-devel"/>
            <arg value="bzip2-devel"/>
            <arg value="libjpeg-turbo-devel"/>
            <arg value="libpng-devel"/>
            <arg value="freetype-devel"/>
            <arg value="libmcrypt-devel"/>
            <arg value="libXpm-devel"/>
            <arg value="pcre-devel"/>
            <arg value="libpng-devel"/>
            <arg value="libcurl-devel"/>
            <arg value="libpng-devel"/>
            <arg value="gcc-c++"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copy build files to target directory                                 -->
    <!-- ==================================================================== -->
    <target name="move-build-to-target" description="Copies build files to target directory.">
        <exec dir="${php-target.dir}" executable="rm">
            <arg value="-rf"/>
            <arg value="${php-target.dir}/re"/>
        </exec>
        <mkdir dir="${php-target.dir}/re" />   
        <mkdir dir="${php-target.dir}/re/opt" />    
        
    	<exec dir="${php-target.dir}" executable="cp">
    	    <arg value="-r"/>
    		<arg value="${appserver.compile.prefix}/"/> 
    		<arg value="${php-target.dir}/re/opt"/>	
    	</exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a DEBIAN package with the local ApplicationServer runtime    -->
    <!-- ==================================================================== -->
    <target name="create-deb" description="Creates a DEBIAN package with the local ApplicationServer runtime.">
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>
        <!-- prepare the DEBIAN build system -->
        <antcall target="prepare-DEBIAN-build-system"/>
        <!-- copy init scripts to required directory -->
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/debian">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <chmod perm="755" file="${php-target.dir}/re/DEBIAN/postinst" />
        <exec dir="${php-target.dir}" executable="dpkg-deb">
            <arg line="--build ${php-target.dir}/re appserver_${appserver.version}_${appserver.architecture}.deb"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a RPM package with the local ApplicationServer runtime       -->
    <!-- ==================================================================== -->
    <target name="create-rpm" description="Creates a RPM package with the local ApplicationServer runtime.">
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>
        <!-- prepare the FEDORA build system -->
        <antcall target="prepare-FEDORA-build-system"/>
        
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/fedora">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        
        <exec dir="${php-target.dir}" executable="rpmbuild" failonerror="true">
            <arg line="--buildroot ${php-target.dir}/re -bb ${php-target.dir}/re/rpmbuild/SPECS/appserver.spec"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a .pkg package with the local ApplicationServer runtime      -->
    <!-- ==================================================================== -->
    <target name="create-pkg" description="Creates a .pkg package with the local ApplicationServer runtime.">
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>
        <!-- copy plist files to required directory -->
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/macosx/plist">
                <include name="**/*"/>
            </fileset>
        </copy>
        <!-- create the .pkg file -->
        <exec dir="${basedir}" executable="pkgbuild">
            <arg value="--root"/>
            <arg value="${php-target.dir}/re"/>
            <arg value="--scripts"/>
            <arg value="${basedir}/buildfiles/macosx/scripts"/>
            <arg value="--install-location"/>
            <arg value="/"/>
            <arg value="--version"/>
            <arg value="${appserver.version}"/>
            <arg value="--identifier"/>
            <arg value="com.techdivision.appserver"/>
            <arg value="${php-target.dir}/ApplicationServer-${appserver.version}.pkg"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Deploys all packages related to the appserver base to               -->
    <!-- ==================================================================== -->
    <target name="deploy-all">
        <parallel>
            <exec dir="${basedir}" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_ApplicationServer" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_MessageQueue" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_MessageQueueClient" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_PersistenceContainer" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_PersistenceContainerClient" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_ServletContainer" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_Socket" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_Stream" executable="ant"><arg value="deploy" /></exec>
       </parallel>
    </target>
    
</project>
